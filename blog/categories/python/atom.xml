<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Python | Hello World]]></title>
  <link href="http://yindashan.github.io/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://yindashan.github.io/"/>
  <updated>2014-10-26T16:57:06+08:00</updated>
  <id>http://yindashan.github.io/</id>
  <author>
    <name><![CDATA[yindashan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Python中反射和自省]]></title>
    <link href="http://yindashan.github.io/blog/2014/10/26/pythonzhong-fan-she-he-zi-sheng/"/>
    <updated>2014-10-26T15:40:10+08:00</updated>
    <id>http://yindashan.github.io/blog/2014/10/26/pythonzhong-fan-she-he-zi-sheng</id>
    <content type="html"><![CDATA[<p>一提到反射，总让人望而却步，感觉是一个比较高深的概念，今天抽时间重点研究了一下Python中反射的用法，特此记录。
什么是反射？简单来说，就是动态调用一个函数或者一个类对象里的函数。
什么时候用到反射呢？有时候我们会需要执行对象的某个方法，或是需要对对象的某个属性赋值，而方法名或者属性名在编码代码时并不能确定，需要通过参数传递字符串的形式输入。
当然，反射的内容不仅仅包含这些，还诸如获取和设置对象属性，访问对象元数据，生成器，代码，栈帧等，大家有兴趣的话可以自行查阅一下。</p>

<p>反射是个很吓唬人的名词，听起来高深莫测，在一般的编程语言里反射相对其他概念来说稍显复杂，一般来说都是作为高级主题来讲；但在Python中反射非常简单，用起来几乎感觉不到与其他的代码有区别，使用反射获取到的函数和方法可以像平常一样加上括号直接调用，获取到类后可以直接构造实例；不过获取到的字段不能直接赋值，因为拿到的其实是另一个指向同一个地方的引用，赋值只能改变当前的这个引用而已。</p>

<p>下面这位兄弟的博客，讲的很清析，可以参考一下：
<a href="http://www.cnblogs.com/huxi/archive/2011/01/02/1924317.html">http://www.cnblogs.com/huxi/archive/2011/01/02/1924317.html</a></p>

<p>首先通过一个例子来看一下本文中可能用到的对象和相关概念。</p>

<p>```</p>

<h1>coding: UTF-8</h1>

<p>import sys #  模块，sys指向这个模块对象
import inspect
def foo(): pass # 函数，foo指向这个函数对象</p>

<p>class Cat(object): # 类，Cat指向这个类对象</p>

<pre><code>def __init__(self, name='kitty'):
    self.name = name
def sayHi(self): #  实例方法，sayHi指向这个方法对象，使用类或实例.sayHi访问
    print self.name, 'says Hi!' # 访问名为name的字段，使用实例.name访问
</code></pre>

<p>cat = Cat() # cat是Cat类的实例对象</p>

<p>print Cat.sayHi # 使用类名访问实例方法时，方法是未绑定的(unbound)
print cat.sayHi # 使用实例访问实例方法时，方法是绑定的(bound)
```
有时候我们会碰到这样的需求，需要执行对象的某个方法，或是需要对对象的某个字段赋值，而方法名或是字段名在编码代码时并不能确定，需要通过参数传递字符串的形式输入。举个具体的例子：当我们需要实现一个通用的DBM框架时，可能需要对数据对象的字段赋值，但我们无法预知用到这个框架的数据对象都有些什么字段，换言之，我们在写框架的时候需要通过某种机制访问未知的属性。</p>

<p>这个机制被称为反射（反过来让对象告诉我们他是什么），或是自省（让对象自己告诉我们他是什么，好吧我承认括号里是我瞎掰的- &ndash;#），用于实现在运行时获取未知对象的信息。反射是个很吓唬人的名词，听起来高深莫测，在一般的编程语言里反射相对其他概念来说稍显复杂，一般来说都是作为高级主题来讲；但在Python中反射非常简单，用起来几乎感觉不到与其他的代码有区别，使用反射获取到的函数和方法可以像平常一样加上括号直接调用，获取到类后可以直接构造实例；不过获取到的字段不能直接赋值，因为拿到的其实是另一个指向同一个地方的引用，赋值只能改变当前的这个引用而已。</p>

<h2>1. 访问对象的属性</h2>

<p>以下列出了几个内建方法，可以用来检查或是访问对象的属性。这些方法可以用于任意对象而不仅仅是例子中的Cat实例对象；Python中一切都是对象。</p>

<p>```
cat = Cat(&lsquo;kitty&rsquo;)</p>

<p>print cat.name # 访问实例属性
cat.sayHi() # 调用实例方法</p>

<p>print dir(cat) # 获取实例的属性名，以列表形式返回
if hasattr(cat, &lsquo;name&rsquo;): # 检查实例是否有这个属性</p>

<pre><code>setattr(cat, 'name', 'tiger') # same as: a.name = 'tiger'
</code></pre>

<p>print getattr(cat, &lsquo;name&rsquo;) # same as: print a.name</p>

<p>getattr(cat, &lsquo;sayHi&rsquo;)() # same as: cat.sayHi()
dir([obj]):
<code>
调用这个方法将返回包含obj大多数属性名的列表（会有一些特殊的属性不包含在内）。obj的默认值是当前的模块对象。
</code>
hasattr(obj, attr):
<code>
这个方法用于检查obj是否有一个名为attr的值的属性，返回一个布尔值。
</code>
getattr(obj, attr):
<code>
调用这个方法将返回obj中名为attr值的属性的值，例如如果attr为'bar'，则返回obj.bar。
</code>
setattr(obj, attr, val):
```
调用这个方法将给obj的名为attr的值的属性赋值为val。例如如果attr为'bar'，则相当于obj.bar = val。</p>

<h2>2. 访问对象的元数据</h2>

<p>当你对一个你构造的对象使用dir()时，可能会发现列表中的很多属性并不是你定义的。这些属性一般保存了对象的元数据，比如类的<strong>name</strong>属性保存了类名。大部分这些属性都可以修改，不过改动它们意义并不是很大；修改其中某些属性如function.func_code还可能导致很难发现的问题，所以改改name什么的就好了，其他的属性不要在不了解后果的情况下修改。</p>

<p>接下来列出特定对象的一些特殊属性。另外，Python的文档中有提到部分属性不一定会一直提供，下文中将以红色的星号*标记，使用前你可以先打开解释器确认一下。</p>

<h3>2.0. 准备工作：确定对象的类型</h3>

<p>在types模块中定义了全部的Python内置类型，结合内置方法isinstance()就可以确定对象的具体类型了。
<code>
isinstance(object, classinfo):
</code>
检查object是不是classinfo中列举出的类型，返回布尔值。classinfo可以是一个具体的类型，也可以是多个类型的元组或列表。
types模块中仅仅定义了类型，而inspect模块中封装了很多检查类型的方法，比直接使用types模块更为轻松，所以这里不给出关于types的更多介绍，如有需要可以直接查看types模块的文档说明。本文第3节中介绍了inspect模块。</p>

<h3>2.1. 模块(module)</h3>

<p><strong>doc</strong>: 文档字符串。如果模块没有文档，这个值是None。
<em><strong>name</strong>: 始终是定义时的模块名；即使你使用import .. as 为它取了别名，或是赋值给了另一个变量名。
</em><strong>dict</strong>: 包含了模块里可用的属性名-属性的字典；也就是可以使用模块名.属性名访问的对象。
<strong>file</strong>: 包含了该模块的文件路径。需要注意的是内建的模块没有这个属性，访问它会抛出异常！
<code>
import fnmatch as m
print m.__doc__.splitlines()[0] # Filename matching with shell patterns.
print m.__name__                # fnmatch
print m.__file__                # /usr/lib/python2.6/fnmatch.pyc
print m.__dict__.items()[0]     # ('fnmatchcase', &lt;function&gt;)&lt;/function&gt;
</code></p>

<h3>2.2. 类(class)</h3>

<p><strong>doc</strong>: 文档字符串。如果类没有文档，这个值是None。
<em><strong>name</strong>: 始终是定义时的类名。
</em><strong>dict</strong>: 包含了类里可用的属性名-属性的字典；也就是可以使用类名.属性名访问的对象。
<strong>module</strong>: 包含该类的定义的模块名；需要注意，是字符串形式的模块名而不是模块对象。
*<strong>bases</strong>: 直接父类对象的元组；但不包含继承树更上层的其他类，比如父类的父类。
<code>
print Cat.__doc__           # None
print Cat.__name__          # Cat
print Cat.__module__        # __main__
print Cat.__bases__         # (&lt;type&gt;,)
print Cat.__dict__          # {'__module__': '__main__', ...}&lt;/type&gt;
</code></p>

<h3>2.3. 实例(instance)</h3>

<p>实例是指类实例化以后的对象。</p>

<p><em><strong>dict</strong>: 包含了可用的属性名-属性字典。
</em><strong>class</strong>: 该实例的类对象。对于类Cat，cat.<strong>class</strong> == Cat 为 True。
<code>
print cat.__dict__
print cat.__class__
print cat.__class__ == Cat # True
</code></p>

<h3>2.4. 内建函数和方法(built-in functions and methods)</h3>

<p>根据定义，内建的(built-in)模块是指使用C写的模块，可以通过sys模块的builtin_module_names字段查看都有哪些模块是内建的。这些模块中的函数和方法可以使用的属性比较少，不过一般也不需要在代码中查看它们的信息。</p>

<p><strong>doc</strong>: 函数或方法的文档。
<strong>name</strong>: 函数或方法定义时的名字。
<strong>self</strong>: 仅方法可用，如果是绑定的(bound)，则指向调用该方法的类（如果是类方法）或实例（如果是实例方法），否则为None。
*<strong>module</strong>: 函数或方法所在的模块名。</p>

<h3>2.5. 函数(function)</h3>

<p>这里特指非内建的函数。注意，在类中使用def定义的是方法，方法与函数虽然有相似的行为，但它们是不同的概念。</p>

<p><strong>doc</strong>: 函数的文档；另外也可以用属性名func_doc。
<strong>name</strong>: 函数定义时的函数名；另外也可以用属性名func_name。
<em><strong>module</strong>: 包含该函数定义的模块名；同样注意，是模块名而不是模块对象。
</em><strong>dict</strong>: 函数的可用属性；另外也可以用属性名func_dict。
不要忘了函数也是对象，可以使用函数.属性名访问属性（赋值时如果属性不存在将新增一个），或使用内置函数has/get/setattr()访问。不过，在函数中保存属性的意义并不大。
func_defaults: 这个属性保存了函数的参数默认值元组；因为默认值总是靠后的参数才有，所以不使用字典的形式也是可以与参数对应上的。
func_code: 这个属性指向一个该函数对应的code对象，code对象中定义了其他的一些特殊属性，将在下文中另外介绍。
func_globals: 这个属性指向定义函数时的全局命名空间。
*func_closure: 这个属性仅当函数是一个闭包时有效，指向一个保存了所引用到的外部函数的变量cell的元组，如果该函数不是一个内部函数，则始终为None。这个属性也是只读的。
下面的代码演示了func_closure：</p>

<p>```</p>

<h1>coding: UTF-8</h1>

<p>def foo():</p>

<pre><code>n = 1
def bar():
    print n # 引用非全局的外部变量n，构造一个闭包
n = 2
return bar
</code></pre>

<p>closure = foo()
print closure.func_closure
```</p>

<h1>使用dir()得知cell对象有一个cell_contents属性可以获得值</h1>

<p><code>
print closure.func_closure[0].cell_contents # 2
</code>
由这个例子可以看到，遇到未知的对象使用dir()是一个很好的主意 ：）</p>

<h3>2.6. 方法(method)</h3>

<p>方法虽然不是函数，但可以理解为在函数外面加了一层外壳；拿到方法里实际的函数以后，就可以使用2.5节的属性了。</p>

<p><strong>doc</strong>: 与函数相同。
<strong>name</strong>: 与函数相同。
*<strong>module</strong>: 与函数相同。
im_func: 使用这个属性可以拿到方法里实际的函数对象的引用。另外如果是2.6以上的版本，还可以使用属性名<strong>func</strong>。
im_self: 如果是绑定的(bound)，则指向调用该方法的类（如果是类方法）或实例（如果是实例方法），否则为None。如果是2.6以上的版本，还可以使用属性名<strong>self</strong>。
im_class: 实际调用该方法的类，或实际调用该方法的实例的类。注意不是方法的定义所在的类，如果有继承关系的话。
<code>
im = cat.sayHi
print im.im_func
print im.im_self # cat
print im.im_class # Cat
</code>
这里讨论的是一般的实例方法，另外还有两种特殊的方法分别是类方法(classmethod)和静态方法(staticmethod)。类方法还是方法，不过因为需要使用类名调用，所以他始终是绑定的；而静态方法可以看成是在类的命名空间里的函数（需要使用类名调用的函数），它只能使用函数的属性，不能使用方法的属性。</p>

<h3>2.7. 生成器(generator)</h3>

<p>生成器是调用一个生成器函数(generator function)返回的对象，多用于集合对象的迭代。</p>

<p><strong>iter</strong>: 仅仅是一个可迭代的标记。
gi_code: 生成器对应的code对象。
gi_frame: 生成器对应的frame对象。
gi_running: 生成器函数是否在执行。生成器函数在yield以后、执行yield的下一行代码前处于frozen状态，此时这个属性的值为0。
next|close|send|throw: 这是几个可调用的方法，并不包含元数据信息，如何使用可以查看生成器的相关文档。
```
def gen():</p>

<pre><code>for n in xrange(5):
    yield n
</code></pre>

<p>g = gen()
print g             # <generator object gen at 0x...>
print g.gi_code     # <code object gen at 0x...>
print g.gi_frame    # <frame object at 0x...>
print g.gi_running  # 0
print g.next()      # 0
print g.next()      # 1
for n in g:</p>

<pre><code>print n,        # 2 3 4
</code></pre>

<p>```
接下来讨论的是几个不常用到的内置对象类型。这些类型在正常的编码过程中应该很少接触，除非你正在自己实现一个解释器或开发环境之类。所以这里只列出一部分属性，如果需要一份完整的属性表或想进一步了解，可以查看文末列出的参考文档。</p>

<h3>2.8. 代码块(code)</h3>

<p>代码块可以由类源代码、函数源代码或是一个简单的语句代码编译得到。这里我们只考虑它指代一个函数时的情况；2.5节中我们曾提到可以使用函数的func_code属性获取到它。code的属性全部是只读的。</p>

<p>co_argcount: 普通参数的总数，不包括<em>参数和**参数。
co_names: 所有的参数名（包括</em>参数和<strong>参数）和局部变量名的元组。
co_varnames: 所有的局部变量名的元组。
co_filename: 源代码所在的文件名。
co_flags:  这是一个数值，每一个二进制位都包含了特定信息。较关注的是0b100(0x4)和0b1000(0x8)，如果co_flags &amp; 0b100 != 0，说明使用了*args参数；如果co_flags &amp; 0b1000 != 0，说明使用了</strong>kwargs参数。另外，如果co_flags &amp; 0b100000(0x20) != 0，则说明这是一个生成器函数(generator function)。
<code>
co = cat.sayHi.func_code
print co.co_argcount        # 1
print co.co_names           # ('name',)
print co.co_varnames        # ('self',)
print co.co_flags &amp; 0b100   # 0
</code></p>

<h3>2.9. 栈帧(frame)</h3>

<p>栈帧表示程序运行时函数调用栈中的某一帧。函数没有属性可以获取它，因为它在函数调用时才会产生，而生成器则是由函数调用返回的，所以有属性指向栈帧。想要获得某个函数相关的栈帧，则必须在调用这个函数且这个函数尚未返回时获取。你可以使用sys模块的_getframe()函数、或inspect模块的currentframe()函数获取当前栈帧。这里列出来的属性全部是只读的。</p>

<p>f_back: 调用栈的前一帧。
f_code: 栈帧对应的code对象。
f_locals: 用在当前栈帧时与内建函数locals()相同，但你可以先获取其他帧然后使用这个属性获取那个帧的locals()。
f_globals: 用在当前栈帧时与内建函数globals()相同，但你可以先获取其他帧……。
```
def add(x, y=1):</p>

<pre><code>f = inspect.currentframe()
print f.f_locals    # same as locals()
print f.f_back      # &lt;frame object at 0x...&gt;
return x+y
</code></pre>

<p>add(2)
```</p>

<h3>2.10. 追踪(traceback)</h3>

<p>追踪是在出现异常时用于回溯的对象，与栈帧相反。由于异常时才会构建，而异常未捕获时会一直向外层栈帧抛出，所以需要使用try才能见到这个对象。你可以使用sys模块的exc_info()函数获得它，这个函数返回一个元组，元素分别是异常类型、异常对象、追踪。traceback的属性全部是只读的。</p>

<p>tb_next: 追踪的下一个追踪对象。
tb_frame: 当前追踪对应的栈帧。
tb_lineno: 当前追踪的行号。
```
def div(x, y):</p>

<pre><code>try:
    return x/y
except:
    tb = sys.exc_info()[2]  # return (exc_type, exc_value, traceback)
    print tb
    print tb.tb_lineno      # "return x/y" 的行号
</code></pre>

<p>div(1, 0)
```</p>

<h2>3. 使用inspect模块</h2>

<p>inspect模块提供了一系列函数用于帮助使用自省。下面仅列出较常用的一些函数，想获得全部的函数资料可以查看inspect模块的文档。</p>

<h3>3.1. 检查对象类型</h3>

<p>is{module|class|function|method|builtin}(obj):
检查对象是否为模块、类、函数、方法、内建函数或方法。
isroutine(obj):
用于检查对象是否为函数、方法、内建函数或方法等等可调用类型。用这个方法会比多个is<em>()更方便，不过它的实现仍然是用了多个is</em>()。
```
im = cat.sayHi
if inspect.isroutine(im):</p>

<pre><code>im()
</code></pre>

<p>```
对于实现了<strong>call</strong>的类实例，这个方法会返回False。如果目的是只要可以直接调用就需要是True的话，不妨使用isinstance(obj, collections.Callable)这种形式。我也不知道为什么Callable会在collections模块中，抱歉！我猜大概是因为collections模块中包含了很多其他的ABC(Abstract Base Class)的缘故吧：）</p>

<h3>3.2. 获取对象信息</h3>

<p><code>
getmembers(object[, predicate]):
</code>
这个方法是dir()的扩展版，它会将dir()找到的名字对应的属性一并返回，形如[(name, value), &hellip;]。另外，predicate是一个方法的引用，如果指定，则应当接受value作为参数并返回一个布尔值，如果为False，相应的属性将不会返回。使用is<em>作为第二个参数可以过滤出指定类型的属性。
<code>
getmodule(object):
</code>
还在为第2节中的<strong>module</strong>属性只返回字符串而遗憾吗？这个方法一定可以满足你，它返回object的定义所在的模块对象。
<code>
get{file|sourcefile}(object):
</code>
获取object的定义所在的模块的文件名|源代码文件名（如果没有则返回None）。用于内建的对象（内建模块、类、函数、方法）上时会抛出TypeError异常。
<code>
get{source|sourcelines}(object):
</code>
获取object的定义的源代码，以字符串|字符串列表返回。代码无法访问时会抛出IOError异常。只能用于module/class/function/method/code/frame/traceack对象。
<code>
getargspec(func):
</code>
仅用于方法，获取方法声明的参数，返回元组，分别是(普通参数名的列表, </em>参数名, <em>*参数名, 默认值元组)。如果没有值，将是空列表和3个None。如果是2.6以上版本，将返回一个命名元组(Named Tuple)，即除了索引外还可以使用属性名访问元组中的元素。<br/>
```
def add(x, y=1, </em>z):</p>

<pre><code>return x + y + sum(z)
</code></pre>

<p>print inspect.getargspec(add)</p>

<h1>ArgSpec(args=[&lsquo;x&rsquo;, &lsquo;y&rsquo;], varargs=&lsquo;z&rsquo;, keywords=None, defaults=(1,))</h1>

<p>getargvalues(frame):
<code>
仅用于栈帧，获取栈帧中保存的该次函数调用的参数值，返回元组，分别是(普通参数名的列表, *参数名, **参数名, 帧的locals())。如果是2.6以上版本，将返回一个命名元组(Named Tuple)，即除了索引外还可以使用属性名访问元组中的元素。
</code>
def add(x, y=1, *z):</p>

<pre><code>print inspect.getargvalues(inspect.currentframe())
return x + y + sum(z)
</code></pre>

<p>add(2)</p>

<h1>ArgInfo(args=[&lsquo;x&rsquo;, &lsquo;y&rsquo;], varargs=&lsquo;z&rsquo;, keywords=None, locals={&lsquo;y&rsquo;: 1, &lsquo;x&rsquo;: 2, &lsquo;z&rsquo;: ()})</h1>

<p>getcallargs(func[, *args][, **kwds]):
<code>
返回使用args和kwds调用该方法时各参数对应的值的字典。这个方法仅在2.7版本中才有。
</code>
getmro(cls):
<code>
返回一个类型元组，查找类属性时按照这个元组中的顺序。如果是新式类，与cls.__mro__结果一样。但旧式类没有__mro__这个属性，直接使用这个属性会报异常，所以这个方法还是有它的价值的。
</code>
print inspect.getmro(Cat)</p>

<h1>(<class '__main__.Cat'>, <type 'object'>)</h1>

<p>print Cat.<strong>mro</strong></p>

<h1>(<class '__main__.Cat'>, <type 'object'>)</h1>

<p>class Dog: pass
print inspect.getmro(Dog)</p>

<h1>(<class __main__.Dog at 0x...>,)</h1>

<p>print Dog.<strong>mro</strong> # AttributeError
currentframe():
```
返回当前的栈帧对象。
其他的操作frame和traceback的函数请查阅inspect模块的文档，用的比较少，这里就不多介绍了。</p>

<h2>4. 本地测试代码</h2>

<h3>4.1. 简单用法</h3>

<p>```</p>

<h1>!/usr/bin/env python</h1>

<h1>coding: utf-8</h1>

<p>&lsquo;&rsquo;&lsquo;
python中的反射
说起反射，大家应该都不陌生吧，特别是熟悉Java的程序员，一定经常和 Class.forName 打交道。
Java的众多框架中，如 Spring ， eclipse plugin 机制等很多都依赖于Java的反射技术。
感觉反射在Java中属于比较高级的技术，通常作为高级主题来讲述。
但是在Python中反射比java中简单得多。 使用反射获取到的函数和方法可以像平常一样加上括号直接调用，获取到类后可以直接构造实例。</p>

<blockquote><blockquote><blockquote><p>import json
methodList = [attr for attr in dir(json)  if callable(getattr(json,attr))]
methodList
[&lsquo;JSONDecoder&rsquo;, &lsquo;JSONEncoder&rsquo;, &lsquo;dump&rsquo;, &lsquo;dumps&rsquo;, &lsquo;load&rsquo;, &lsquo;loads&rsquo;]</p>

<p>&lsquo;&rsquo;&lsquo;
import sys #  模块，sys指向这个模块对象
import inspect
def foo(): pass # 函数，foo指向这个函数对象</p></blockquote></blockquote></blockquote>

<p>class Cat(object): # 类，Cat指向这个类对象</p>

<pre><code>def __init__(self, name='kitty'):
    self.name = name

def echo_methods(self):
    """ 输出类中所有的方法，以及doc 文档 """
    print "\n Method List: "
    for item_method in dir(self):
        attr = getattr(self, item_method)
        if callable(attr):
            print item_method,"():",attr.__doc__

def echo_attributes(self):
    print "\n Attributes"
    for item_attr in dir(self):
        attr = getattr(self, item_attr)
        if not callable(attr):
            print item_attr,":",attr

def sayHi(self): #  实例方法，sayHi指向这个方法对象，使用类或实例.sayHi访问
    print self.name, 'says Hi!' # 访问名为name的字段，使用实例.name访问

def print_name(self, name):
    self.name = name
    print self.name, 'print_name!'
</code></pre>

<p>def main():</p>

<pre><code>cat = Cat() # cat是Cat类的实例对象
print Cat.sayHi # 使用类名访问实例方法时，方法是未绑定的(unbound)
print cat.sayHi # 使用实例访问实例方法时，方法是绑定的(bound)

cat.echo_attributes()
cat.echo_methods()

cat = Cat('kitty')
print cat.name # 访问实例属性
cat.sayHi() # 调用实例方法

print dir(cat) # 获取实例的属性名，以列表形式返回
if hasattr(cat, 'name'): # 检查实例是否有这个属性
    setattr(cat, 'name', 'tiger') # same as: a.name = 'tiger'
print getattr(cat, 'name') # same as: print a.name

getattr(cat, 'sayHi')() # same as: cat.sayHi()
</code></pre>

<h1>for item in dir(cat):</h1>

<h1>if not item.startswith(&ldquo;__&rdquo;) and callable(getattr(cat, item)): # callable检查属性是否是可以调用的函数</h1>

<h1>func = getattr(cat, item)</h1>

<h1>func() # 调用函数</h1>

<pre><code>func = getattr(cat, "print_name")
if callable(func):
    func('hello')
</code></pre>

<p>if <strong>name</strong> == &ldquo;<strong>main</strong>&rdquo;:</p>

<pre><code>main()
</code></pre>

<p>```</p>

<h3>4.2. 稍微复杂点的用法</h3>

<p>```</p>

<h1>&ndash;<em>&ndash; coding: UTF-8 &ndash;</em>&ndash;</h1>

<p>&lsquo;&rsquo;&lsquo;
python中反射用法
&rsquo;&lsquo;&rsquo;</p>

<p>import inspect
import re</p>

<h1>===============================================================================</h1>

<h1>测试</h1>

<h1>===============================================================================</h1>

<p>def _unittest(func, *cases):</p>

<pre><code>for case in cases:
    _functest(func, *case)
</code></pre>

<p>def _functest(func, isCkPass, *args, **kws):</p>

<pre><code>try:
    print 'isCkPass = ', isCkPass
    func(*args, **kws)
except Exception as e:
    print e
</code></pre>

<p>def _test1_simple():</p>

<pre><code>def foo1(i): print 'i=', i
_unittest(foo1, 
          (True, 1), 
          (False, 's'), 
          (False, None))

def foo2(s, x): pass
_unittest(foo2, 
          (True, 1, 2), 
          (False, 's', 's'))

def foo7(s, **kws): pass
_functest(foo7, True, s='a', a=1, b=2)
</code></pre>

<p>def _main():</p>

<pre><code>d = globals()
from types import FunctionType
print
for f in d:
    if f.startswith('_test'):
        f = d[f]
        if isinstance(f, FunctionType):
            f()
</code></pre>

<p>if <strong>name</strong> == &lsquo;<strong>main</strong>&rsquo;:</p>

<pre><code>_main()
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python中json_pickle_cPickle在序列化时的性能对比]]></title>
    <link href="http://yindashan.github.io/blog/2014/10/25/pythonzhong-json-pickle-cpicklezai-xu-lie-hua-shi-de-dui-bi/"/>
    <updated>2014-10-25T10:51:57+08:00</updated>
    <id>http://yindashan.github.io/blog/2014/10/25/pythonzhong-json-pickle-cpicklezai-xu-lie-hua-shi-de-dui-bi</id>
    <content type="html"><![CDATA[<p>在上篇介绍python中装饰器的文章中(<a href="http://yindashan.github.io/blog/2014/10/24/pythonzhong-zhuang-shi-qi-xiang-jie/">http://yindashan.github.io/blog/2014/10/24/pythonzhong-zhuang-shi-qi-xiang-jie/</a>)提到一个装饰器实例，原来的打算是利用redis缓存减少请求的响应时间，第一次从数据库中获取数据，把数据回种到缓存，然后返回数据，第二次请求的时候直接从redis缓存中读取就可以了，经过实践发现性能并没有提升，反而下降了，这到底是什么情况呢？后来经过代码分析发现时间都花费在下面这行代码上了，足足会有4s.
<code>
json.loads(ret_data)
</code>
这个函数平常用的时候性能可以啊，完全能够满足自己的需求，这次到底是怎么回事？又经过一番分析，发现是由于ret_data数据量太大导致的，数据大概在15M左右，所以要把15M的字符数据转换成json对象这个太耗时了。从数据库中取数据才需要2s左右，现在从redis中取并解析完成需要将近5s,这显然不能满足需求。</p>

<p>既然在数据量比较大的情况下json.loads()函数性能不能满足需求，那就得寻找其他的解决方案了，最终发现python中的内建序列化库pickle和cPickle是一个不错的选择，想到就测，发现在同等数据量的情况下json.loads()需要消耗4s左右，pickle只需要消耗1.5s左右，而cPickle更快，只需要消耗300ms左右,取其中一组测试结果：
<code>
hget cost time:  0:00:00.052490
json.loads cost time:  0:00:04.859132
pickle.loads cost time:  0:00:01.458769
cPickle.loads cost time:  0:00:00.361623
</code></p>

<p>测试代码如下：
```
import json
import time
import datetime
import traceback
import pickle
import cPickle</p>

<p>import redis</p>

<p>def test_redis():</p>

<pre><code>"""
测试redis
"""
redis_db = redis.StrictRedis(host='127.0.0.1', port=6379, db=0, password='N6MXWf')

d1 = datetime.datetime.now()
ret_data = redis_db.hget('forecast_redis', '20141023')
d2 = datetime.datetime.now()
print 'hget cost time: ', d2 - d1
ret_data = json.loads(ret_data)
d3 = datetime.datetime.now()
print 'json.loads cost time: ', d3 - d2
ret_data = redis_db.hget('forecast_redis', '20141024')
d4 = datetime.datetime.now()
ret_data = pickle.loads(ret_data)
d5 = datetime.datetime.now()
print 'pickle.loads cost time: ', d5 - d4
ret_data = redis_db.hget('forecast_redis', '20141025')
d6 = datetime.datetime.now()
ret_data = cPickle.loads(ret_data)
d7 = datetime.datetime.now()
print 'cPickle.loads cost time: ', d7 - d6
print 'success'
</code></pre>

<p>def main():</p>

<pre><code>test_redis()
</code></pre>

<p>if <strong>name</strong> == &ldquo;<strong>main</strong>&rdquo;:</p>

<pre><code>main()
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python中装饰器详解]]></title>
    <link href="http://yindashan.github.io/blog/2014/10/24/pythonzhong-zhuang-shi-qi-xiang-jie/"/>
    <updated>2014-10-24T21:59:08+08:00</updated>
    <id>http://yindashan.github.io/blog/2014/10/24/pythonzhong-zhuang-shi-qi-xiang-jie</id>
    <content type="html"><![CDATA[<p>一直对装饰器的概念很模糊，今天终于花时间重点研究了一下。Python中的装饰器就类似于Java中的面向切面编程，就是在函数执行前和执行后包装自定义的一些东西。关于装饰器的原理和简易实现可以参考这位兄弟的博客，写的很简单易懂。</p>

<p><a href="http://www.cnblogs.com/huxi/archive/2011/03/01/1967600.html">http://www.cnblogs.com/huxi/archive/2011/03/01/1967600.html</a></p>

<h2>1. 装饰器入门</h2>

<h3>1.1. 需求是怎么来的？</h3>

<p>装饰器的定义很是抽象，我们来看一个小例子。</p>

<p>```
def foo():</p>

<pre><code>print 'in foo()'
</code></pre>

<p>foo()
```
这是一个很无聊的函数没错。但是突然有一个更无聊的人，我们称呼他为B君，说我想看看执行这个函数用了多长时间，好吧，那么我们可以这样做：</p>

<p>```
import time
def foo():</p>

<pre><code>start = time.clock()
print 'in foo()'
end = time.clock()
print 'used:', end - start
</code></pre>

<p>foo()
```
很好，功能看起来无懈可击。可是蛋疼的B君此刻突然不想看这个函数了，他对另一个叫foo2的函数产生了更浓厚的兴趣。</p>

<p>怎么办呢？如果把以上新增加的代码复制到foo2里，这就犯了大忌了~复制什么的难道不是最讨厌了么！而且，如果B君继续看了其他的函数呢？</p>

<h3>1.2. 以不变应万变，是变也</h3>

<p>还记得吗，函数在Python中是一等公民，那么我们可以考虑重新定义一个函数timeit，将foo的引用传递给他，然后在timeit中调用foo并进行计时，这样，我们就达到了不改动foo定义的目的，而且，不论B君看了多少个函数，我们都不用去修改函数定义了！</p>

<p>```
import time</p>

<p>def foo():</p>

<pre><code>print 'in foo()'
</code></pre>

<p>def timeit(func):</p>

<pre><code>start = time.clock()
func()
end =time.clock()
print 'used:', end - start
</code></pre>

<p>timeit(foo)
```
看起来逻辑上并没有问题，一切都很美好并且运作正常！……等等，我们似乎修改了调用部分的代码。原本我们是这样调用的：foo()，修改以后变成了：timeit(foo)。这样的话，如果foo在N处都被调用了，你就不得不去修改这N处的代码。或者更极端的，考虑其中某处调用的代码无法修改这个情况，比如：这个函数是你交给别人使用的。</p>

<h3>1.3. 最大限度地少改动！</h3>

<p>既然如此，我们就来想想办法不修改调用的代码；如果不修改调用代码，也就意味着调用foo()需要产生调用timeit(foo)的效果。我们可以想到将timeit赋值给foo，但是timeit似乎带有一个参数……想办法把参数统一吧！如果timeit(foo)不是直接产生调用效果，而是返回一个与foo参数列表一致的函数的话……就很好办了，将timeit(foo)的返回值赋值给foo，然后，调用foo()的代码完全不用修改！</p>

<p>```</p>

<h1>&ndash;<em>&ndash; coding: UTF-8 &ndash;</em>&ndash;</h1>

<p>import time</p>

<p>def foo():</p>

<pre><code>print 'in foo()'
</code></pre>

<h1>定义一个计时器，传入一个，并返回另一个附加了计时功能的方法</h1>

<p>def timeit(func):</p>

<pre><code># 定义一个内嵌的包装函数，给传入的函数加上计时功能的包装
def wrapper():
    start = time.clock()
    func()
    end =time.clock()
    print 'used:', end - start

# 将包装后的函数返回, 记住一定要返回 ，不然外面调用foo的地方将会无函数可用。实际上此时foo=timeit(foo)
return wrapper
</code></pre>

<p>foo = timeit(foo)
foo()
```
这样，一个简易的计时器就做好了！我们只需要在定义foo以后调用foo之前，加上foo = timeit(foo)，就可以达到计时的目的，这也就是装饰器的概念，看起来像是foo被timeit装饰了。在在这个例子中，函数进入和退出时需要计时，这被称为一个横切面(Aspect)，这种编程方式被称为面向切面的编程(Aspect-Oriented Programming)。与传统编程习惯的从上往下执行方式相比较而言，像是在函数执行的流程中横向地插入了一段逻辑。在特定的业务领域里，能减少大量重复代码。面向切面编程还有相当多的术语，这里就不多做介绍，感兴趣的话可以去找找相关的资料。</p>

<p>这个例子仅用于演示，并没有考虑foo带有参数和有返回值的情况，完善它的重任就交给你了 ：）</p>

<h2>2. Python的额外支持</h2>

<h3>2.1. 语法糖</h3>

<p>上面这段代码看起来似乎已经不能再精简了，Python于是提供了一个语法糖来降低字符输入量。</p>

<p>```
import time</p>

<p>def timeit(func):</p>

<pre><code>def wrapper():
    start = time.clock()
    func()
    end =time.clock()
    print 'used:', end - start
return wrapper
</code></pre>

<p>@timeit
def foo():</p>

<pre><code>print 'in foo()'
</code></pre>

<p>foo()
```
重点关注第11行的@timeit，在定义上加上这一行与另外写foo = timeit(foo)完全等价，千万不要以为@有另外的魔力。除了字符输入少了一些，还有一个额外的好处：这样看上去更有装饰器的感觉。</p>

<h3>2.2. 内置的装饰器</h3>

<p>内置的装饰器有三个，分别是staticmethod、classmethod和property，作用分别是把类中定义的实例方法变成静态方法、类方法和类属性。由于模块里可以定义函数，所以静态方法和类方法的用处并不是太多，除非你想要完全的面向对象编程。而属性也不是不可或缺的，Java没有属性也一样活得很滋润。从我个人的Python经验来看，我没有使用过property，使用staticmethod和classmethod的频率也非常低。</p>

<p>```
class Rabbit(object):</p>

<pre><code>def __init__(self, name):
    self._name = name

@staticmethod
def newRabbit(name):
    return Rabbit(name)

@classmethod
def newRabbit2(cls):
    return Rabbit('')

@property
def name(self):
    return self._name
</code></pre>

<p>```
这里定义的属性是一个只读属性，如果需要可写，则需要再定义一个setter：</p>

<p>```
@name.setter
def name(self, name):</p>

<pre><code>self._name = name
</code></pre>

<p>```</p>

<h3>2.3. functools模块</h3>

<p>functools模块提供了两个装饰器。这个模块是Python 2.5后新增的，一般来说大家用的应该都高于这个版本。但我平时的工作环境是2.4 T-T</p>

<h4>2.3.1. wraps(wrapped[, assigned][, updated]):</h4>

<p>这是一个很有用的装饰器。看过前一篇反射的朋友应该知道，函数是有几个特殊属性比如函数名，在被装饰后，上例中的函数名foo会变成包装函数的名字wrapper，如果你希望使用反射，可能会导致意外的结果。这个装饰器可以解决这个问题，它能将装饰过的函数的特殊属性保留。</p>

<p>```
import time
import functools</p>

<p>def timeit(func):</p>

<pre><code>@functools.wraps(func)
def wrapper():
    start = time.clock()
    func()
    end =time.clock()
    print 'used:', end - start
return wrapper
</code></pre>

<p>@timeit
def foo():</p>

<pre><code>print 'in foo()'
</code></pre>

<p>foo()
print foo.<strong>name</strong>
```
首先注意第5行，如果注释这一行，foo.<strong>name</strong>将是'wrapper'。另外相信你也注意到了，这个装饰器竟然带有一个参数。实际上，他还有另外两个可选的参数，assigned中的属性名将使用赋值的方式替换，而updated中的属性名将使用update的方式合并，你可以通过查看functools的源代码获得它们的默认值。对于这个装饰器，相当于wrapper = functools.wraps(func)(wrapper)。</p>

<h2>3. 下面是我本地测试的一些示例</h2>

<h3>3.1. 普通装饰器</h3>

<p>```
def common(func):</p>

<pre><code>'''普通装饰器'''
def _deco(*args, **kwargs):
    print 'args:', args
    return func(*args, **kwargs)
return _deco
</code></pre>

<p>@common
def test_common(p):</p>

<pre><code>print p
</code></pre>

<p>def main():</p>

<pre><code>test_common(1)
</code></pre>

<p>if <strong>name</strong> == &ldquo;<strong>main</strong>&rdquo;:</p>

<pre><code>main()
</code></pre>

<p>```</p>

<h3>3.2. 给函数的类装饰器(避免在装饰器对象上保留状态)</h3>

<p>```
class Common(object):</p>

<pre><code>'''给函数的类装饰器(避免在装饰器对象上保留状态)'''
def __init__(self, func):
    self.func = func
def __call__(self, *args, **kwargs):
    print 'args:', args
    return self.func(*args, **kwargs)
</code></pre>

<p>@Common
def test_common_class(p):</p>

<pre><code>print p
</code></pre>

<p>def main():</p>

<pre><code>test_common_class(2)
</code></pre>

<p>if <strong>name</strong> == &ldquo;<strong>main</strong>&rdquo;:</p>

<pre><code>main()
</code></pre>

<p>```</p>

<h3>3.3. 带参数的装饰器</h3>

<p>```
def common_arg(*args, **kw):</p>

<pre><code>'''带参数的装饰器'''
a = args
b = kw
def _common_arg(func):
    def _deco(*args, **kwargs):
        print 'args:', args, a, b
        return func(*args, **kwargs)
    return _deco
return _common_arg
</code></pre>

<p>@common_arg(&lsquo;c&rsquo;, &rsquo;d', e=1)
def test_common_arg(p):</p>

<pre><code>print p
</code></pre>

<p>def main():</p>

<pre><code>test_common_arg(3)
</code></pre>

<p>if <strong>name</strong> == &ldquo;<strong>main</strong>&rdquo;:</p>

<pre><code>main()
</code></pre>

<p>```</p>

<h3>3.4. 一个比较实用的示例</h3>

<p>模拟从数据库中获取数据，第一次从数据库中获取，获取成功后保存到redis里面，以后每次都从redis里面获取
```
import json
import redis</p>

<p>def redis_cache(*args, **kwargs):</p>

<pre><code>redis_link_dict = kwargs
print redis_link_dict
redis_db = redis.StrictRedis(redis_link_dict['host'], redis_link_dict['port'], redis_link_dict['db'], redis_link_dict['password'])
def _decorator(func):
    def _wrapped(*args, **kwargs):
        key, hash_key = args
        print key, hash_key
        # 判断当前key是否存在
        is_key = redis_db.exists(key)
        if is_key:
            # 判断当前key下是否有hash_key
            is_hash_key = redis_db.hexists(key, hash_key)
            if is_hash_key:
                ret_data = redis_db.hget(key, hash_key)
                if ret_data:
                    print u'从redis中获取数据'
                    return json.loads(ret_data)
        print u'从数据库中获取并写入到redis'
        ret_data = func(*args, **kwargs)
        redis_db.hset(key, hash_key, json.dumps(ret_data))
        return ret_data
    return _wrapped
return _decorator
</code></pre>

<p>@redis_cache(host=&lsquo;127.0.0.1&rsquo;, port=6379, db=0, password=&lsquo;N6MXWf&rsquo;)
def get_data_from_redis_or_db(key, hash_key):</p>

<pre><code>'''
获取数据
'''
ret_data = {
    "username":"dashan",
    "datetime":"20141024"
}
return ret_data
</code></pre>

<p>def main():</p>

<pre><code>key = 'dashan_hash'
hash_key = '20141024'
print get_data_from_redis_or_db(key, hash_key)
</code></pre>

<p>if <strong>name</strong> == &ldquo;<strong>main</strong>&rdquo;:</p>

<pre><code>main()
</code></pre>

<p>```</p>

<h3>3.5. 另外一个装饰器的使用场景</h3>

<p>tornado中的用户认证模块
```
class MessageNewHandler(BaseHandler,MessageMixin):</p>

<pre><code>@tornado.web.authenticated
def post(self):
    user  = self.get_current_user()
    message = {
            "id":str(uuid.uuid4()),
            "current_user":user.id,
            'up':0,
    }
</code></pre>

<p><code>
上面代码表示在执行post方法之前必须经过用户登录认证，认证通过后才可以正常执行该方法。
看看tornado.web.authenticated 是怎么实现的：
</code>
def authenticated(method):</p>

<pre><code>"""Decorate methods with this to require that the user be logged in."""
@functools.wraps(method)
def wrapper(self, *args, **kwargs):
    if not self.current_user:
        if self.request.method in ("GET", "HEAD"):
            url = self.get_login_url()
            if "?" not in url:
                if urlparse.urlsplit(url).scheme:
                    # if login url is absolute, make next absolute too
                    next_url = self.request.full_url()
                else:
                    next_url = self.request.uri
                url += "?" + urllib.urlencode(dict(next=next_url))
            self.redirect(url)
            return
        raise HTTPError(403)
    return method(self, *args, **kwargs)
return wrapper
</code></pre>

<p>```</p>

<hr />

<p>简单讲一下 functools.wraps 这个修饰器的作用：
functools 这个工具提供了三个函数：partial ,update_wrapper,wraps ,而wraps 只是对 update_wrapper进行了封装一下而已。</p>

<p>在修饰器
```
def myDeco(func)</p>

<pre><code>return func
</code></pre>

<p>```
这一句中，func 实际上已经丢掉了原func 的几个属性：<strong>name</strong>、<strong>module</strong>、<strong>doc</strong>和 <strong>dict</strong>，所以，返回后的函数你无法再使用  func.<strong>doc</strong>  来获得注释内容 ，而如果改成这样：</p>

<p>```
def myDeco(func):</p>

<pre><code>@functools.wraps(func)

def _myDeco(*args,**kwargs):

    return func(*args,**kwargs)

return _myDeco
</code></pre>

<p>```
则 functools.wraps 会帮你重新绑定在返回的新函数上。</p>

<hr />

<p>说回到tornado 的例子，看它是怎么做认证 预处理的。</p>

<p>首先是：
<code>
if not self.current_user
</code>
判断是否当前用户(self.current_user是tornado的内置变量，保存当前登录的用户），如果不是，则抛出错误：</p>

<p><code>
raise HTTPError(403)
</code>
否则就返回:
<code>
return method(self, *args, **kwargs)
</code>
表示认证成功，开发者可以继续对认证成功的用户做应该做的动作。</p>
]]></content>
  </entry>
  
</feed>
